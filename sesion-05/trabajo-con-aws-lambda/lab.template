{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "VPC with an Amazon Linux LAMP instance in a public subnet",
    "Parameters": {
        "VPCCIDR": {
            "Description": "CIDR Block for VPC",
            "Type": "String",
            "Default": "10.200.0.0/20",
            "AllowedValues": [
                "10.200.0.0/20"
            ]
        },
        "PublicSubnet1Param": {
            "Description": "Public Subnet 1",
            "Type": "String",
            "Default": "10.200.0.0/24",
            "AllowedValues": [
                "10.200.0.0/24"
            ]
        },
        "PrivateSubnet1Param": {
            "Description": "Private Subnet 1",
            "Type": "String",
            "Default": "10.200.2.0/23",
            "AllowedValues": [
                "10.200.2.0/23"
            ]
        },
        "KeyName": {
            "Type": "String",
            "Description": "Keyname for the keypair",
            "Default": "lab-key-pair"
        },
        "LatestAmiId": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "VPC",
                        "Value": "Cafe"
                    },
                    {
                        "Key": "Name",
                        "Value": "Cafe VPC"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "DependsOn": "VPC"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "DependsOn": [
                "VPC",
                "InternetGateway"
            ],
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "DependsOn": "VPC",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet1Param"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Cafe Public Subnet 1"
                    }
                ]
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "DependsOn": [
                "VPC",
                "AttachGateway"
            ],
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public Route Table"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": [
                "VPC",
                "PublicRouteTable",
                "InternetGateway",
                "AttachGateway"
            ],
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn": [
                "PublicRouteTable",
                "PublicSubnet1"
            ],
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "DependsOn": "VPC",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet1Param"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private Subnet 1"
                    }
                ]
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "DependsOn": [
                "VPC"
            ],
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private Route Table 1"
                    }
                ]
            }
        },
        "PrivateRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": [
                "VPC",
                "PrivateRouteTable",
                "NATGateway"
            ],
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway"
                }
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "DependsOn": [
                "PrivateRouteTable",
                "PrivateSubnet1"
            ],
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PrivateRouteTable"
                }
            }
        },
        "NATGateway": {
            "DependsOn": "AttachGateway",
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "EIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "CafeInstance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": [
                "VPC",
                "CafeSecurityGroup",
                "PublicSubnet1"
            ],
            "Properties": {
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "CafeInstanceProfile"
                },
                "InstanceType": "t3.micro",
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0",
                        "AssociatePublicIpAddress": "true",
                        "SubnetId": {
                            "Ref": "PublicSubnet1"
                        },
                        "GroupSet": [
                            {
                                "Ref": "CafeSecurityGroup"
                            }
                        ]
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "CafeInstance"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex \n",
                                "yum -y update \n",
                                "amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2 \n",
                                "yum -y install httpd mariadb-server wget \n",
                                "systemctl enable httpd \n",
                                "systemctl start httpd \n",
                                "systemctl enable mariadb \n",
                                "systemctl start mariadb \n",
                                "echo '<html><h1>Hello From Your Web Server!</h1></html>' > /var/www/html/index.html \n",
                                "find /var/www -type d -exec chmod 2775 {} \\; \n",
                                "find /var/www -type f -exec chmod 0664 {} \\; \n",
                                "echo \"<?php phpinfo(); ?>\" > /var/www/html/phpinfo.php \n",
                                "usermod -a -G apache ec2-user \n",
                                "chown -R ec2-user:apache /var/www \n",
                                "chmod 2775 /var/www \n",
                                "wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-1-23732/178-activity-JAWS-working-lambda/s3/setup-v2.tar.gz \n",
                                "tar -zxvf setup-v2.tar.gz \n",
                                "wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-1-23732/178-activity-JAWS-working-lambda/s3/db-v2.tar.gz \n",
                                "tar -zxvf db-v2.tar.gz \n",
                                "wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-1-23732/178-activity-JAWS-working-lambda/s3/cafe-v2.tar.gz  \n",
                                "tar -zxvf cafe-v2.tar.gz -C /var/www/html/ \n",
                                "cd setup \n",
                                "./set-app-parameters.sh \n",
                                "cd ../db/ \n",
                                "./set-root-password.sh \n",
                                "./create-db.sh \n",
                                "cd /home/ec2-user \n",
                                "wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-1-23732/178-activity-JAWS-working-lambda/s3/pymysql-0.9.3.zip \n",
                                "wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-1-23732/178-activity-JAWS-working-lambda/s3/salesAnalysisReport-v2.zip \n",
                                "wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-1-23732/178-activity-JAWS-working-lambda/s3/salesAnalysisReportDataExtractor-v2.zip \n",
                                "chown ec2-user:ec2-user *.zip \n"
                            ]
                        ]
                    }
                }
            }
        },
        "IamPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "FullSsmAccess",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ssm:*"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "CafeIamRole"
                    }
                ]
            }
        },
        "CafeIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "CafeInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "DependsOn": [
                "CafeIamRole"
            ],
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "CafeIamRole"
                    }
                ]
            }
        },
        "IamRoleForLambda": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "salesAnalysisReportRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "salesAnalysisReportRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AWSLambdaBasicRunRole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "AmazonSSMReadOnlyAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:Describe*",
                                        "ssm:Get*",
                                        "ssm:List*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "AmazonSNSFullAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "sns:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "AWSLambdaRole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "lambda:InvokeFunction"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "salesAnalysisReportDERole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "salesAnalysisReportDERole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "AWSLambdaBasicRunRole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "AWSLambdaVPCAccessRunRole",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "CafeSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": "VPC",
            "Properties": {
                "GroupDescription": "Security group for the Cafe instance",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "CafeSecurityGroup"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "CliHostInstance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": [
                "VPC",
                "CliHostInstanceSG",
                "PublicSubnet1"
            ],
            "Properties": {
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "InstanceType": "t3.micro",
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0",
                        "AssociatePublicIpAddress": "true",
                        "SubnetId": {
                            "Ref": "PublicSubnet1"
                        },
                        "GroupSet": [
                            {
                                "Ref": "CliHostInstanceSG"
                            }
                        ]
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "CLI Host"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex \n",
                                "yum -y update \n",
                                "yum install -y wget \n",
                                "mkdir /home/ec2-user/activity-files \n",
                                "chown ec2-user:ec2-user /home/ec2-user/activity-files \n",
                                "wget -O /home/ec2-user/activity-files/salesAnalysisReport-v2.zip https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-1-23732/178-activity-JAWS-working-lambda/s3/salesAnalysisReport-v2.zip \n",
                                "chown ec2-user:ec2-user /home/ec2-user/activity-files/salesAnalysisReport-v2.zip \n"
                            ]
                        ]
                    }
                }
            }
        },
        "CliHostInstanceSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "DependsOn": "VPC",
            "Properties": {
                "GroupDescription": "Security group for the CLI Host Linux instance",
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "CLI Host SG"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "IAMUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "UserName": "awsstudent"
            }
        },
        "IAMPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "DependsOn": "IAMUser",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "AllowAllActions",
                            "Effect": "Allow",
                            "Action": [
                                "cloudformation:List*",
                                "cloudformation:Describe*",
                                "cloudformation:Detect*",
                                "cloudformation:EstimateTemplateCost",
                                "cloudformation:Get*",
                                "cloudwatch:*",
                                "ec2:*Address*",
                                "ec2:*Bundle*",
                                "ec2:*Cidr*",
                                "ec2:*Dhcp*",
                                "ec2:*Encryption*",
                                "ec2:*Event*",
                                "ec2:*Gateway*",
                                "ec2:*IdFormat",
                                "ec2:*Image*",
                                "ec2:*KeyPair",
                                "ec2:*Kms*",
                                "ec2:*Log*",
                                "ec2:*Managed*",
                                "ec2:*Network*",
                                "ec2:*Route*",
                                "ec2:*SecurityGroup*",
                                "ec2:*SnapshotAttribute",
                                "ec2:*Subnet*",
                                "ec2:*Tag*",
                                "ec2:*Task",
                                "ec2:*Traffic*",
                                "ec2:*Vpc*",
                                "ec2:*Vpn*",
                                "ec2:Accept*",
                                "ec2:AllocateHosts",
                                "ec2:Associate*",
                                "ec2:AttachVolume",
                                "ec2:Cancel*",
                                "ec2:Confirm*",
                                "ec2:CopySnapshot",
                                "ec2:CreateSnapshot*",
                                "ec2:Delete*",
                                "ec2:Describe*",
                                "ec2:DetachVolume",
                                "ec2:Disable*",
                                "ec2:Disassociate*",
                                "ec2:Export*",
                                "ec2:Get*",
                                "ec2:ModifyAvailabilityZoneGroup",
                                "ec2:ModifyInstanceMetadataOptions",
                                "ec2:MonitorInstances",
                                "ec2:ReleaseHosts",
                                "ec2:ReplaceIamInstanceProfileAssociation",
                                "ec2:ReportInstanceStatus",
                                "ec2:SendDiagnosticInterrupt",
                                "ec2:StopInstances",
                                "ec2:TerminateInstances",
                                "ec2:UnmonitorInstances",
                                "events:*",
                                "iam:List*",
                                "iam:Get*",
                                "kms:List*",
                                "kms:Describe*",
                                "lambda:Add*",
                                "lambda:Create*",
                                "lambda:Delete*",
                                "lambda:Get*",
                                "lambda:Invoke*",
                                "lambda:List*",
                                "lambda:Publish*",
                                "lambda:Put*",
                                "lambda:Remove*",
                                "lambda:Tag*",
                                "lambda:Untag*",
                                "lambda:Update*",
                                "logs:List*",
                                "logs:Describe*",
                                "logs:*",
                                "resource-groups:Get*",
                                "resource-groups:List*",
                                "resource-groups:SearchResources",
                                "ssm:List*",
                                "ssm:Describe*",
                                "ssm:Get*",
                                "ssm:PutInventory",
                                "ssm:PutComplianceItems",
                                "ssm:PutConfigurePackageResult",
                                "ssm:UpdateAssociationStatus",
                                "ssm:UpdateInstanceAssociationStatus",
                                "ssm:UpdateInstanceInformation",
                                "ssm:CancelCommand",
                                "ssm:SendCommand",
                                "ssm:StartAutomationExecution",
                                "ssm:StartSession",
                                "ssm:TerminateSession",
                                "ssm:ResumeSession",
                                "ssm:DescribeSessions",
                                "ssm:GetConnectionStatus",
                                "sns:CreateTopic",
                                "sns:DeleteTopic",
                                "sns:AddPermission",
                                "sns:RemovePermission",
                                "sns:Publish",
                                "sns:Subscribe",
                                "sns:Unsubscribe",
                                "sns:ConfirmSubscription",
                                "sns:Get*",
                                "sns:Set*",
                                "sns:List*",
                                "tag:*"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Sid": "RestrictInstanceActions",
                            "Effect": "Allow",
                            "Action": [
                                "ec2:CreateFleet",
                                "ec2:CreateLaunchTemplate",
                                "ec2:CreateLaunchTemplateVersion",
                                "ec2:CreateVolume",
                                "ec2:EnableVolumeIO",
                                "ec2:ImportInstance",
                                "ec2:ImportSnapshot",
                                "ec2:ImportVolume",
                                "ec2:ModifyFleet",
                                "ec2:ModifyInstanceAttribute",
                                "ec2:ModifyInstanceCreditSpecification",
                                "ec2:ModifyLaunchTemplate",
                                "ec2:ModifyVolume",
                                "ec2:ModifyVolumeAttribute",
                                "ec2:RebootInstances",
                                "ec2:ResetInstanceAttribute",
                                "ec2:RunInstances",
                                "ec2:StartInstances"
                            ],
                            "Resource": "*",
                            "Condition": {
                                "StringEqualsIfExists": {
                                    "ec2:Owner": "amazon"
                                },
                                "StringLikeIfExists": {
                                    "ec2:InstanceType": [
                                        "t*.nano",
                                        "t*.micro"
                                    ],
                                    "ec2:Tenancy": "default"
                                },
                                "StringNotEqualsIfExists": {
                                    "ec2:PlacementGroupStrategy": "cluster"
                                },
                                "StringNotLikeIfExists": {
                                    "ec2:VolumeType": [
                                        "io*",
                                        "st*"
                                    ]
                                },
                                "NumericLessThanEqualsIfExists": {
                                    "ec2:VolumeSize": "100"
                                }
                            }
                        },
                        {
                            "Sid": "RestrictActions",
                            "Effect": "Deny",
                            "Action": [
                                "ec2:*Fpga*",
                                "ec2:*Purchase*",
                                "ec2:*ReservedInstances*",
                                "ec2:*Scheduled*",
                                "ec2:*Spot*",
                                "ec2:AcceptVpcEndpointConnections",
                                "ec2:AttachVpnGateway",
                                "ec2:CreateCapacityReservation",
                                "ec2:CreateVpnGateway",
                                "ec2:EnableFastSnapshotRestores"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Sid": "ServiceLinkedRoleAndPolicies",
                            "Effect": "Allow",
                            "Action": [
                                "iam:PassRole"
                            ],
                            "Resource": "arn:aws:iam::*:role/*salesAnalysisReport*",
                            "Condition": {
                                "StringLikeIfExists": {
                                    "iam:PassedToService": [
                                        "lambda.amazonaws.com"
                                    ]
                                }
                            }
                        }
                    ]
                },
                "ManagedPolicyName": "lab_policy",
                "Users": [
                    "awsstudent"
                ]
            }
        },
        "IAMUserAccessKey": {
            "Type": "AWS::IAM::AccessKey",
            "DependsOn": "IAMUser",
            "Properties": {
                "Status": "Active",
                "UserName": "awsstudent"
            }
        }
    },
    "Outputs": {
        "CafePublicIP": {
            "Description": "Public IP address of CafeInstance",
            "Value": {
                "Fn::GetAtt": [
                    "CafeInstance",
                    "PublicIp"
                ]
            }
        },
        "CafeServerPubDNS": {
            "Description": "Public DNS address of CafeInstance",
            "Value": {
                "Fn::GetAtt": [
                    "CafeInstance",
                    "PublicDnsName"
                ]
            }
        },
        "CliHostPublicIP": {
            "Description": "Public IP address of CafeInstance2",
            "Value": {
                "Fn::GetAtt": [
                    "CliHostInstance",
                    "PublicIp"
                ]
            }
        },
        "LabRegion": {
            "Value": {
                "Ref": "AWS::Region"
            }
        },
        "AccessKey": {
            "Value": {
                "Ref": "IAMUserAccessKey"
            }
        },
        "SecretKey": {
            "Value": {
                "Fn::GetAtt": [
                    "IAMUserAccessKey",
                    "SecretAccessKey"
                ]
            }
        }
    }
}